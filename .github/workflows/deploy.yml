name: Deploy Flask (Docker) to EC2

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Docker Build & Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create .env file from GitHub Secrets
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "QDRANT_URL=${{ secrets.QDRANT_URL }}" >> .env
          echo "QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}" >> .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Docker 이미지 생성
        run: docker build -t flask-recommender .

      - name: AWS ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ap-northeast-2

      - name: 이미지 태깅
        run: docker tag flask-recommender ${{ steps.login-ecr.outputs.registry }}/flask-recommender:latest

      - name: ECR에 Docker 이미지 push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/flask-recommender:latest

      # ✅ .env 파일을 EC2로 복사
      - name: Upload .env to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: ".env"
          target: "~/springboot-server/.env"

      # ✅ EC2에서 Flask 컨테이너 재배포
      - name: SSH로 EC2에 접속 후 Docker compose 실행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            cd ~/springboot-server
            docker compose pull flask-recommender
            docker compose up -d flask-recommender
